//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.4971
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace EP {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DataSetEXP3")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class DataSetEXP3 : global::System.Data.DataSet {
        
        private TESFORMRESINFODataTable tableTESFORMRESINFO;
        
        private TESBUTTONRESINFODataTable tableTESBUTTONRESINFO;
        
        private TESOTHERRESINFODataTable tableTESOTHERRESINFO;
        
        private TESTREEINFODataTable tableTESTREEINFO;
        
        private TESFORMRESINFO_RESDataTable tableTESFORMRESINFO_RES;
        
        private TESBUTTONRESINFO_RESDataTable tableTESBUTTONRESINFO_RES;
        
        private TESOTHERRESINFO_RESDataTable tableTESOTHERRESINFO_RES;
        
        private TESTREEINFO_RESDataTable tableTESTREEINFO_RES;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DataSetEXP3() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected DataSetEXP3(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["TESFORMRESINFO"] != null)) {
                    base.Tables.Add(new TESFORMRESINFODataTable(ds.Tables["TESFORMRESINFO"]));
                }
                if ((ds.Tables["TESBUTTONRESINFO"] != null)) {
                    base.Tables.Add(new TESBUTTONRESINFODataTable(ds.Tables["TESBUTTONRESINFO"]));
                }
                if ((ds.Tables["TESOTHERRESINFO"] != null)) {
                    base.Tables.Add(new TESOTHERRESINFODataTable(ds.Tables["TESOTHERRESINFO"]));
                }
                if ((ds.Tables["TESTREEINFO"] != null)) {
                    base.Tables.Add(new TESTREEINFODataTable(ds.Tables["TESTREEINFO"]));
                }
                if ((ds.Tables["TESFORMRESINFO_RES"] != null)) {
                    base.Tables.Add(new TESFORMRESINFO_RESDataTable(ds.Tables["TESFORMRESINFO_RES"]));
                }
                if ((ds.Tables["TESBUTTONRESINFO_RES"] != null)) {
                    base.Tables.Add(new TESBUTTONRESINFO_RESDataTable(ds.Tables["TESBUTTONRESINFO_RES"]));
                }
                if ((ds.Tables["TESOTHERRESINFO_RES"] != null)) {
                    base.Tables.Add(new TESOTHERRESINFO_RESDataTable(ds.Tables["TESOTHERRESINFO_RES"]));
                }
                if ((ds.Tables["TESTREEINFO_RES"] != null)) {
                    base.Tables.Add(new TESTREEINFO_RESDataTable(ds.Tables["TESTREEINFO_RES"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TESFORMRESINFODataTable TESFORMRESINFO {
            get {
                return this.tableTESFORMRESINFO;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TESBUTTONRESINFODataTable TESBUTTONRESINFO {
            get {
                return this.tableTESBUTTONRESINFO;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TESOTHERRESINFODataTable TESOTHERRESINFO {
            get {
                return this.tableTESOTHERRESINFO;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TESTREEINFODataTable TESTREEINFO {
            get {
                return this.tableTESTREEINFO;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TESFORMRESINFO_RESDataTable TESFORMRESINFO_RES {
            get {
                return this.tableTESFORMRESINFO_RES;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TESBUTTONRESINFO_RESDataTable TESBUTTONRESINFO_RES {
            get {
                return this.tableTESBUTTONRESINFO_RES;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TESOTHERRESINFO_RESDataTable TESOTHERRESINFO_RES {
            get {
                return this.tableTESOTHERRESINFO_RES;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public TESTREEINFO_RESDataTable TESTREEINFO_RES {
            get {
                return this.tableTESTREEINFO_RES;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            DataSetEXP3 cln = ((DataSetEXP3)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["TESFORMRESINFO"] != null)) {
                    base.Tables.Add(new TESFORMRESINFODataTable(ds.Tables["TESFORMRESINFO"]));
                }
                if ((ds.Tables["TESBUTTONRESINFO"] != null)) {
                    base.Tables.Add(new TESBUTTONRESINFODataTable(ds.Tables["TESBUTTONRESINFO"]));
                }
                if ((ds.Tables["TESOTHERRESINFO"] != null)) {
                    base.Tables.Add(new TESOTHERRESINFODataTable(ds.Tables["TESOTHERRESINFO"]));
                }
                if ((ds.Tables["TESTREEINFO"] != null)) {
                    base.Tables.Add(new TESTREEINFODataTable(ds.Tables["TESTREEINFO"]));
                }
                if ((ds.Tables["TESFORMRESINFO_RES"] != null)) {
                    base.Tables.Add(new TESFORMRESINFO_RESDataTable(ds.Tables["TESFORMRESINFO_RES"]));
                }
                if ((ds.Tables["TESBUTTONRESINFO_RES"] != null)) {
                    base.Tables.Add(new TESBUTTONRESINFO_RESDataTable(ds.Tables["TESBUTTONRESINFO_RES"]));
                }
                if ((ds.Tables["TESOTHERRESINFO_RES"] != null)) {
                    base.Tables.Add(new TESOTHERRESINFO_RESDataTable(ds.Tables["TESOTHERRESINFO_RES"]));
                }
                if ((ds.Tables["TESTREEINFO_RES"] != null)) {
                    base.Tables.Add(new TESTREEINFO_RESDataTable(ds.Tables["TESTREEINFO_RES"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableTESFORMRESINFO = ((TESFORMRESINFODataTable)(base.Tables["TESFORMRESINFO"]));
            if ((initTable == true)) {
                if ((this.tableTESFORMRESINFO != null)) {
                    this.tableTESFORMRESINFO.InitVars();
                }
            }
            this.tableTESBUTTONRESINFO = ((TESBUTTONRESINFODataTable)(base.Tables["TESBUTTONRESINFO"]));
            if ((initTable == true)) {
                if ((this.tableTESBUTTONRESINFO != null)) {
                    this.tableTESBUTTONRESINFO.InitVars();
                }
            }
            this.tableTESOTHERRESINFO = ((TESOTHERRESINFODataTable)(base.Tables["TESOTHERRESINFO"]));
            if ((initTable == true)) {
                if ((this.tableTESOTHERRESINFO != null)) {
                    this.tableTESOTHERRESINFO.InitVars();
                }
            }
            this.tableTESTREEINFO = ((TESTREEINFODataTable)(base.Tables["TESTREEINFO"]));
            if ((initTable == true)) {
                if ((this.tableTESTREEINFO != null)) {
                    this.tableTESTREEINFO.InitVars();
                }
            }
            this.tableTESFORMRESINFO_RES = ((TESFORMRESINFO_RESDataTable)(base.Tables["TESFORMRESINFO_RES"]));
            if ((initTable == true)) {
                if ((this.tableTESFORMRESINFO_RES != null)) {
                    this.tableTESFORMRESINFO_RES.InitVars();
                }
            }
            this.tableTESBUTTONRESINFO_RES = ((TESBUTTONRESINFO_RESDataTable)(base.Tables["TESBUTTONRESINFO_RES"]));
            if ((initTable == true)) {
                if ((this.tableTESBUTTONRESINFO_RES != null)) {
                    this.tableTESBUTTONRESINFO_RES.InitVars();
                }
            }
            this.tableTESOTHERRESINFO_RES = ((TESOTHERRESINFO_RESDataTable)(base.Tables["TESOTHERRESINFO_RES"]));
            if ((initTable == true)) {
                if ((this.tableTESOTHERRESINFO_RES != null)) {
                    this.tableTESOTHERRESINFO_RES.InitVars();
                }
            }
            this.tableTESTREEINFO_RES = ((TESTREEINFO_RESDataTable)(base.Tables["TESTREEINFO_RES"]));
            if ((initTable == true)) {
                if ((this.tableTESTREEINFO_RES != null)) {
                    this.tableTESTREEINFO_RES.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DataSetEXP3";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/DataSetEXP3.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableTESFORMRESINFO = new TESFORMRESINFODataTable();
            base.Tables.Add(this.tableTESFORMRESINFO);
            this.tableTESBUTTONRESINFO = new TESBUTTONRESINFODataTable();
            base.Tables.Add(this.tableTESBUTTONRESINFO);
            this.tableTESOTHERRESINFO = new TESOTHERRESINFODataTable();
            base.Tables.Add(this.tableTESOTHERRESINFO);
            this.tableTESTREEINFO = new TESTREEINFODataTable();
            base.Tables.Add(this.tableTESTREEINFO);
            this.tableTESFORMRESINFO_RES = new TESFORMRESINFO_RESDataTable();
            base.Tables.Add(this.tableTESFORMRESINFO_RES);
            this.tableTESBUTTONRESINFO_RES = new TESBUTTONRESINFO_RESDataTable();
            base.Tables.Add(this.tableTESBUTTONRESINFO_RES);
            this.tableTESOTHERRESINFO_RES = new TESOTHERRESINFO_RESDataTable();
            base.Tables.Add(this.tableTESOTHERRESINFO_RES);
            this.tableTESTREEINFO_RES = new TESTREEINFO_RESDataTable();
            base.Tables.Add(this.tableTESTREEINFO_RES);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTESFORMRESINFO() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTESBUTTONRESINFO() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTESOTHERRESINFO() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTESTREEINFO() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTESFORMRESINFO_RES() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTESBUTTONRESINFO_RES() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTESOTHERRESINFO_RES() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeTESTREEINFO_RES() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DataSetEXP3 ds = new DataSetEXP3();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void TESFORMRESINFORowChangeEventHandler(object sender, TESFORMRESINFORowChangeEvent e);
        
        public delegate void TESBUTTONRESINFORowChangeEventHandler(object sender, TESBUTTONRESINFORowChangeEvent e);
        
        public delegate void TESOTHERRESINFORowChangeEventHandler(object sender, TESOTHERRESINFORowChangeEvent e);
        
        public delegate void TESTREEINFORowChangeEventHandler(object sender, TESTREEINFORowChangeEvent e);
        
        public delegate void TESFORMRESINFO_RESRowChangeEventHandler(object sender, TESFORMRESINFO_RESRowChangeEvent e);
        
        public delegate void TESBUTTONRESINFO_RESRowChangeEventHandler(object sender, TESBUTTONRESINFO_RESRowChangeEvent e);
        
        public delegate void TESOTHERRESINFO_RESRowChangeEventHandler(object sender, TESOTHERRESINFO_RESRowChangeEvent e);
        
        public delegate void TESTREEINFO_RESRowChangeEventHandler(object sender, TESTREEINFO_RESRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TESFORMRESINFODataTable : global::System.Data.TypedTableBase<TESFORMRESINFORow> {
            
            private global::System.Data.DataColumn columnNAME;
            
            private global::System.Data.DataColumn columnDESCRIPTION;
            
            private global::System.Data.DataColumn columnDLLNAME;
            
            private global::System.Data.DataColumn columnACLID;
            
            private global::System.Data.DataColumn columnABBREV;
            
            private global::System.Data.DataColumn columnICONNUM;
            
            private global::System.Data.DataColumn columnFORM_CALL_MODE;
            
            private global::System.Data.DataColumn columnAPPNAME;
            
            private global::System.Data.DataColumn columnDLLPATH;
            
            private global::System.Data.DataColumn columnADMIN1;
            
            private global::System.Data.DataColumn columnADMIN2;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TESFORMRESINFODataTable() {
                this.TableName = "TESFORMRESINFO";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TESFORMRESINFODataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TESFORMRESINFODataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DESCRIPTIONColumn {
                get {
                    return this.columnDESCRIPTION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DLLNAMEColumn {
                get {
                    return this.columnDLLNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ACLIDColumn {
                get {
                    return this.columnACLID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ABBREVColumn {
                get {
                    return this.columnABBREV;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ICONNUMColumn {
                get {
                    return this.columnICONNUM;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FORM_CALL_MODEColumn {
                get {
                    return this.columnFORM_CALL_MODE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn APPNAMEColumn {
                get {
                    return this.columnAPPNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DLLPATHColumn {
                get {
                    return this.columnDLLPATH;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ADMIN1Column {
                get {
                    return this.columnADMIN1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ADMIN2Column {
                get {
                    return this.columnADMIN2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TESFORMRESINFORow this[int index] {
                get {
                    return ((TESFORMRESINFORow)(this.Rows[index]));
                }
            }
            
            public event TESFORMRESINFORowChangeEventHandler TESFORMRESINFORowChanging;
            
            public event TESFORMRESINFORowChangeEventHandler TESFORMRESINFORowChanged;
            
            public event TESFORMRESINFORowChangeEventHandler TESFORMRESINFORowDeleting;
            
            public event TESFORMRESINFORowChangeEventHandler TESFORMRESINFORowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTESFORMRESINFORow(TESFORMRESINFORow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TESFORMRESINFORow AddTESFORMRESINFORow(string NAME, string DESCRIPTION, string DLLNAME, long ACLID, string ABBREV, short ICONNUM, string FORM_CALL_MODE, string APPNAME, string DLLPATH, string ADMIN1, string ADMIN2) {
                TESFORMRESINFORow rowTESFORMRESINFORow = ((TESFORMRESINFORow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        NAME,
                        DESCRIPTION,
                        DLLNAME,
                        ACLID,
                        ABBREV,
                        ICONNUM,
                        FORM_CALL_MODE,
                        APPNAME,
                        DLLPATH,
                        ADMIN1,
                        ADMIN2};
                rowTESFORMRESINFORow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTESFORMRESINFORow);
                return rowTESFORMRESINFORow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TESFORMRESINFODataTable cln = ((TESFORMRESINFODataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TESFORMRESINFODataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNAME = base.Columns["NAME"];
                this.columnDESCRIPTION = base.Columns["DESCRIPTION"];
                this.columnDLLNAME = base.Columns["DLLNAME"];
                this.columnACLID = base.Columns["ACLID"];
                this.columnABBREV = base.Columns["ABBREV"];
                this.columnICONNUM = base.Columns["ICONNUM"];
                this.columnFORM_CALL_MODE = base.Columns["FORM_CALL_MODE"];
                this.columnAPPNAME = base.Columns["APPNAME"];
                this.columnDLLPATH = base.Columns["DLLPATH"];
                this.columnADMIN1 = base.Columns["ADMIN1"];
                this.columnADMIN2 = base.Columns["ADMIN2"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNAME = new global::System.Data.DataColumn("NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME);
                this.columnDESCRIPTION = new global::System.Data.DataColumn("DESCRIPTION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDESCRIPTION);
                this.columnDLLNAME = new global::System.Data.DataColumn("DLLNAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDLLNAME);
                this.columnACLID = new global::System.Data.DataColumn("ACLID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnACLID);
                this.columnABBREV = new global::System.Data.DataColumn("ABBREV", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnABBREV);
                this.columnICONNUM = new global::System.Data.DataColumn("ICONNUM", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnICONNUM);
                this.columnFORM_CALL_MODE = new global::System.Data.DataColumn("FORM_CALL_MODE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFORM_CALL_MODE);
                this.columnAPPNAME = new global::System.Data.DataColumn("APPNAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAPPNAME);
                this.columnDLLPATH = new global::System.Data.DataColumn("DLLPATH", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDLLPATH);
                this.columnADMIN1 = new global::System.Data.DataColumn("ADMIN1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnADMIN1);
                this.columnADMIN2 = new global::System.Data.DataColumn("ADMIN2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnADMIN2);
                this.columnNAME.Caption = "画面名";
                this.columnDESCRIPTION.Caption = "画面描述";
                this.columnDLLNAME.Caption = "动态库";
                this.columnABBREV.Caption = "缩写";
                this.columnICONNUM.Caption = "图标编号";
                this.columnFORM_CALL_MODE.Caption = "调用方式";
                this.columnAPPNAME.Caption = "子系统";
                this.columnDLLPATH.Caption = "程序路径";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TESFORMRESINFORow NewTESFORMRESINFORow() {
                return ((TESFORMRESINFORow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TESFORMRESINFORow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TESFORMRESINFORow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TESFORMRESINFORowChanged != null)) {
                    this.TESFORMRESINFORowChanged(this, new TESFORMRESINFORowChangeEvent(((TESFORMRESINFORow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TESFORMRESINFORowChanging != null)) {
                    this.TESFORMRESINFORowChanging(this, new TESFORMRESINFORowChangeEvent(((TESFORMRESINFORow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TESFORMRESINFORowDeleted != null)) {
                    this.TESFORMRESINFORowDeleted(this, new TESFORMRESINFORowChangeEvent(((TESFORMRESINFORow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TESFORMRESINFORowDeleting != null)) {
                    this.TESFORMRESINFORowDeleting(this, new TESFORMRESINFORowChangeEvent(((TESFORMRESINFORow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTESFORMRESINFORow(TESFORMRESINFORow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSetEXP3 ds = new DataSetEXP3();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TESFORMRESINFODataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TESBUTTONRESINFODataTable : global::System.Data.TypedTableBase<TESBUTTONRESINFORow> {
            
            private global::System.Data.DataColumn columnNAME;
            
            private global::System.Data.DataColumn columnFNAME;
            
            private global::System.Data.DataColumn columnACLID;
            
            private global::System.Data.DataColumn columnDESCRIPTION;
            
            private global::System.Data.DataColumn columnOPTYPE;
            
            private global::System.Data.DataColumn columnAPPNAME;
            
            private global::System.Data.DataColumn columnADMIN1;
            
            private global::System.Data.DataColumn columnADMIN2;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TESBUTTONRESINFODataTable() {
                this.TableName = "TESBUTTONRESINFO";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TESBUTTONRESINFODataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TESBUTTONRESINFODataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FNAMEColumn {
                get {
                    return this.columnFNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ACLIDColumn {
                get {
                    return this.columnACLID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DESCRIPTIONColumn {
                get {
                    return this.columnDESCRIPTION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OPTYPEColumn {
                get {
                    return this.columnOPTYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn APPNAMEColumn {
                get {
                    return this.columnAPPNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ADMIN1Column {
                get {
                    return this.columnADMIN1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ADMIN2Column {
                get {
                    return this.columnADMIN2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TESBUTTONRESINFORow this[int index] {
                get {
                    return ((TESBUTTONRESINFORow)(this.Rows[index]));
                }
            }
            
            public event TESBUTTONRESINFORowChangeEventHandler TESBUTTONRESINFORowChanging;
            
            public event TESBUTTONRESINFORowChangeEventHandler TESBUTTONRESINFORowChanged;
            
            public event TESBUTTONRESINFORowChangeEventHandler TESBUTTONRESINFORowDeleting;
            
            public event TESBUTTONRESINFORowChangeEventHandler TESBUTTONRESINFORowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTESBUTTONRESINFORow(TESBUTTONRESINFORow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TESBUTTONRESINFORow AddTESBUTTONRESINFORow(string NAME, string FNAME, long ACLID, string DESCRIPTION, string OPTYPE, string APPNAME, string ADMIN1, string ADMIN2) {
                TESBUTTONRESINFORow rowTESBUTTONRESINFORow = ((TESBUTTONRESINFORow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        NAME,
                        FNAME,
                        ACLID,
                        DESCRIPTION,
                        OPTYPE,
                        APPNAME,
                        ADMIN1,
                        ADMIN2};
                rowTESBUTTONRESINFORow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTESBUTTONRESINFORow);
                return rowTESBUTTONRESINFORow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TESBUTTONRESINFODataTable cln = ((TESBUTTONRESINFODataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TESBUTTONRESINFODataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNAME = base.Columns["NAME"];
                this.columnFNAME = base.Columns["FNAME"];
                this.columnACLID = base.Columns["ACLID"];
                this.columnDESCRIPTION = base.Columns["DESCRIPTION"];
                this.columnOPTYPE = base.Columns["OPTYPE"];
                this.columnAPPNAME = base.Columns["APPNAME"];
                this.columnADMIN1 = base.Columns["ADMIN1"];
                this.columnADMIN2 = base.Columns["ADMIN2"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNAME = new global::System.Data.DataColumn("NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME);
                this.columnFNAME = new global::System.Data.DataColumn("FNAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFNAME);
                this.columnACLID = new global::System.Data.DataColumn("ACLID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnACLID);
                this.columnDESCRIPTION = new global::System.Data.DataColumn("DESCRIPTION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDESCRIPTION);
                this.columnOPTYPE = new global::System.Data.DataColumn("OPTYPE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOPTYPE);
                this.columnAPPNAME = new global::System.Data.DataColumn("APPNAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAPPNAME);
                this.columnADMIN1 = new global::System.Data.DataColumn("ADMIN1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnADMIN1);
                this.columnADMIN2 = new global::System.Data.DataColumn("ADMIN2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnADMIN2);
                this.columnNAME.Caption = "按钮名";
                this.columnFNAME.Caption = "所属画面";
                this.columnDESCRIPTION.Caption = "按钮描述";
                this.columnOPTYPE.Caption = "操作类型";
                this.columnAPPNAME.Caption = "子系统";
                this.columnADMIN1.Caption = "管理员1";
                this.columnADMIN2.Caption = "管理员2";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TESBUTTONRESINFORow NewTESBUTTONRESINFORow() {
                return ((TESBUTTONRESINFORow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TESBUTTONRESINFORow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TESBUTTONRESINFORow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TESBUTTONRESINFORowChanged != null)) {
                    this.TESBUTTONRESINFORowChanged(this, new TESBUTTONRESINFORowChangeEvent(((TESBUTTONRESINFORow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TESBUTTONRESINFORowChanging != null)) {
                    this.TESBUTTONRESINFORowChanging(this, new TESBUTTONRESINFORowChangeEvent(((TESBUTTONRESINFORow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TESBUTTONRESINFORowDeleted != null)) {
                    this.TESBUTTONRESINFORowDeleted(this, new TESBUTTONRESINFORowChangeEvent(((TESBUTTONRESINFORow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TESBUTTONRESINFORowDeleting != null)) {
                    this.TESBUTTONRESINFORowDeleting(this, new TESBUTTONRESINFORowChangeEvent(((TESBUTTONRESINFORow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTESBUTTONRESINFORow(TESBUTTONRESINFORow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSetEXP3 ds = new DataSetEXP3();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TESBUTTONRESINFODataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TESOTHERRESINFODataTable : global::System.Data.TypedTableBase<TESOTHERRESINFORow> {
            
            private global::System.Data.DataColumn columnNAME;
            
            private global::System.Data.DataColumn columnDESCRIPTION;
            
            private global::System.Data.DataColumn columnACLID;
            
            private global::System.Data.DataColumn columnRESOURCETYPE;
            
            private global::System.Data.DataColumn columnADMIN1;
            
            private global::System.Data.DataColumn columnADMIN2;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TESOTHERRESINFODataTable() {
                this.TableName = "TESOTHERRESINFO";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TESOTHERRESINFODataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TESOTHERRESINFODataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DESCRIPTIONColumn {
                get {
                    return this.columnDESCRIPTION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ACLIDColumn {
                get {
                    return this.columnACLID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RESOURCETYPEColumn {
                get {
                    return this.columnRESOURCETYPE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ADMIN1Column {
                get {
                    return this.columnADMIN1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ADMIN2Column {
                get {
                    return this.columnADMIN2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TESOTHERRESINFORow this[int index] {
                get {
                    return ((TESOTHERRESINFORow)(this.Rows[index]));
                }
            }
            
            public event TESOTHERRESINFORowChangeEventHandler TESOTHERRESINFORowChanging;
            
            public event TESOTHERRESINFORowChangeEventHandler TESOTHERRESINFORowChanged;
            
            public event TESOTHERRESINFORowChangeEventHandler TESOTHERRESINFORowDeleting;
            
            public event TESOTHERRESINFORowChangeEventHandler TESOTHERRESINFORowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTESOTHERRESINFORow(TESOTHERRESINFORow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TESOTHERRESINFORow AddTESOTHERRESINFORow(string NAME, string DESCRIPTION, long ACLID, short RESOURCETYPE, string ADMIN1, string ADMIN2) {
                TESOTHERRESINFORow rowTESOTHERRESINFORow = ((TESOTHERRESINFORow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        NAME,
                        DESCRIPTION,
                        ACLID,
                        RESOURCETYPE,
                        ADMIN1,
                        ADMIN2};
                rowTESOTHERRESINFORow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTESOTHERRESINFORow);
                return rowTESOTHERRESINFORow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TESOTHERRESINFODataTable cln = ((TESOTHERRESINFODataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TESOTHERRESINFODataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNAME = base.Columns["NAME"];
                this.columnDESCRIPTION = base.Columns["DESCRIPTION"];
                this.columnACLID = base.Columns["ACLID"];
                this.columnRESOURCETYPE = base.Columns["RESOURCETYPE"];
                this.columnADMIN1 = base.Columns["ADMIN1"];
                this.columnADMIN2 = base.Columns["ADMIN2"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNAME = new global::System.Data.DataColumn("NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME);
                this.columnDESCRIPTION = new global::System.Data.DataColumn("DESCRIPTION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDESCRIPTION);
                this.columnACLID = new global::System.Data.DataColumn("ACLID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnACLID);
                this.columnRESOURCETYPE = new global::System.Data.DataColumn("RESOURCETYPE", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRESOURCETYPE);
                this.columnADMIN1 = new global::System.Data.DataColumn("ADMIN1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnADMIN1);
                this.columnADMIN2 = new global::System.Data.DataColumn("ADMIN2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnADMIN2);
                this.columnNAME.Caption = "名称";
                this.columnDESCRIPTION.Caption = "资源描述";
                this.columnRESOURCETYPE.Caption = "资源类型";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TESOTHERRESINFORow NewTESOTHERRESINFORow() {
                return ((TESOTHERRESINFORow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TESOTHERRESINFORow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TESOTHERRESINFORow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TESOTHERRESINFORowChanged != null)) {
                    this.TESOTHERRESINFORowChanged(this, new TESOTHERRESINFORowChangeEvent(((TESOTHERRESINFORow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TESOTHERRESINFORowChanging != null)) {
                    this.TESOTHERRESINFORowChanging(this, new TESOTHERRESINFORowChangeEvent(((TESOTHERRESINFORow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TESOTHERRESINFORowDeleted != null)) {
                    this.TESOTHERRESINFORowDeleted(this, new TESOTHERRESINFORowChangeEvent(((TESOTHERRESINFORow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TESOTHERRESINFORowDeleting != null)) {
                    this.TESOTHERRESINFORowDeleting(this, new TESOTHERRESINFORowChangeEvent(((TESOTHERRESINFORow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTESOTHERRESINFORow(TESOTHERRESINFORow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSetEXP3 ds = new DataSetEXP3();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TESOTHERRESINFODataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TESTREEINFODataTable : global::System.Data.TypedTableBase<TESTREEINFORow> {
            
            private global::System.Data.DataColumn columnNAME;
            
            private global::System.Data.DataColumn columnFNAME;
            
            private global::System.Data.DataColumn columnDESCRIPTION;
            
            private global::System.Data.DataColumn columnSHORTCUT;
            
            private global::System.Data.DataColumn columnACLID;
            
            private global::System.Data.DataColumn columnRESNAME;
            
            private global::System.Data.DataColumn columnTREENO;
            
            private global::System.Data.DataColumn columnTREESEQ;
            
            private global::System.Data.DataColumn columnAPPNAME;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TESTREEINFODataTable() {
                this.TableName = "TESTREEINFO";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TESTREEINFODataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TESTREEINFODataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FNAMEColumn {
                get {
                    return this.columnFNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DESCRIPTIONColumn {
                get {
                    return this.columnDESCRIPTION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SHORTCUTColumn {
                get {
                    return this.columnSHORTCUT;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ACLIDColumn {
                get {
                    return this.columnACLID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RESNAMEColumn {
                get {
                    return this.columnRESNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TREENOColumn {
                get {
                    return this.columnTREENO;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TREESEQColumn {
                get {
                    return this.columnTREESEQ;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn APPNAMEColumn {
                get {
                    return this.columnAPPNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TESTREEINFORow this[int index] {
                get {
                    return ((TESTREEINFORow)(this.Rows[index]));
                }
            }
            
            public event TESTREEINFORowChangeEventHandler TESTREEINFORowChanging;
            
            public event TESTREEINFORowChangeEventHandler TESTREEINFORowChanged;
            
            public event TESTREEINFORowChangeEventHandler TESTREEINFORowDeleting;
            
            public event TESTREEINFORowChangeEventHandler TESTREEINFORowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTESTREEINFORow(TESTREEINFORow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TESTREEINFORow AddTESTREEINFORow(string NAME, string FNAME, string DESCRIPTION, string SHORTCUT, long ACLID, string RESNAME, long TREENO, string TREESEQ, string APPNAME) {
                TESTREEINFORow rowTESTREEINFORow = ((TESTREEINFORow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        NAME,
                        FNAME,
                        DESCRIPTION,
                        SHORTCUT,
                        ACLID,
                        RESNAME,
                        TREENO,
                        TREESEQ,
                        APPNAME};
                rowTESTREEINFORow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTESTREEINFORow);
                return rowTESTREEINFORow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TESTREEINFODataTable cln = ((TESTREEINFODataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TESTREEINFODataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNAME = base.Columns["NAME"];
                this.columnFNAME = base.Columns["FNAME"];
                this.columnDESCRIPTION = base.Columns["DESCRIPTION"];
                this.columnSHORTCUT = base.Columns["SHORTCUT"];
                this.columnACLID = base.Columns["ACLID"];
                this.columnRESNAME = base.Columns["RESNAME"];
                this.columnTREENO = base.Columns["TREENO"];
                this.columnTREESEQ = base.Columns["TREESEQ"];
                this.columnAPPNAME = base.Columns["APPNAME"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNAME = new global::System.Data.DataColumn("NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME);
                this.columnFNAME = new global::System.Data.DataColumn("FNAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFNAME);
                this.columnDESCRIPTION = new global::System.Data.DataColumn("DESCRIPTION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDESCRIPTION);
                this.columnSHORTCUT = new global::System.Data.DataColumn("SHORTCUT", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSHORTCUT);
                this.columnACLID = new global::System.Data.DataColumn("ACLID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnACLID);
                this.columnRESNAME = new global::System.Data.DataColumn("RESNAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRESNAME);
                this.columnTREENO = new global::System.Data.DataColumn("TREENO", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTREENO);
                this.columnTREESEQ = new global::System.Data.DataColumn("TREESEQ", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTREESEQ);
                this.columnAPPNAME = new global::System.Data.DataColumn("APPNAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAPPNAME);
                this.columnNAME.Caption = "节点名";
                this.columnFNAME.Caption = "父节点名";
                this.columnDESCRIPTION.Caption = "节点描述";
                this.columnRESNAME.Caption = "资源名";
                this.columnTREESEQ.Caption = "节点序号";
                this.columnAPPNAME.Caption = "子系统";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TESTREEINFORow NewTESTREEINFORow() {
                return ((TESTREEINFORow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TESTREEINFORow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TESTREEINFORow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TESTREEINFORowChanged != null)) {
                    this.TESTREEINFORowChanged(this, new TESTREEINFORowChangeEvent(((TESTREEINFORow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TESTREEINFORowChanging != null)) {
                    this.TESTREEINFORowChanging(this, new TESTREEINFORowChangeEvent(((TESTREEINFORow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TESTREEINFORowDeleted != null)) {
                    this.TESTREEINFORowDeleted(this, new TESTREEINFORowChangeEvent(((TESTREEINFORow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TESTREEINFORowDeleting != null)) {
                    this.TESTREEINFORowDeleting(this, new TESTREEINFORowChangeEvent(((TESTREEINFORow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTESTREEINFORow(TESTREEINFORow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSetEXP3 ds = new DataSetEXP3();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TESTREEINFODataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TESFORMRESINFO_RESDataTable : global::System.Data.TypedTableBase<TESFORMRESINFO_RESRow> {
            
            private global::System.Data.DataColumn columnCULTURE;
            
            private global::System.Data.DataColumn columnACLID;
            
            private global::System.Data.DataColumn columnDESCRIPTION;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TESFORMRESINFO_RESDataTable() {
                this.TableName = "TESFORMRESINFO_RES";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TESFORMRESINFO_RESDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TESFORMRESINFO_RESDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CULTUREColumn {
                get {
                    return this.columnCULTURE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ACLIDColumn {
                get {
                    return this.columnACLID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DESCRIPTIONColumn {
                get {
                    return this.columnDESCRIPTION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TESFORMRESINFO_RESRow this[int index] {
                get {
                    return ((TESFORMRESINFO_RESRow)(this.Rows[index]));
                }
            }
            
            public event TESFORMRESINFO_RESRowChangeEventHandler TESFORMRESINFO_RESRowChanging;
            
            public event TESFORMRESINFO_RESRowChangeEventHandler TESFORMRESINFO_RESRowChanged;
            
            public event TESFORMRESINFO_RESRowChangeEventHandler TESFORMRESINFO_RESRowDeleting;
            
            public event TESFORMRESINFO_RESRowChangeEventHandler TESFORMRESINFO_RESRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTESFORMRESINFO_RESRow(TESFORMRESINFO_RESRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TESFORMRESINFO_RESRow AddTESFORMRESINFO_RESRow(string CULTURE, long ACLID, string DESCRIPTION) {
                TESFORMRESINFO_RESRow rowTESFORMRESINFO_RESRow = ((TESFORMRESINFO_RESRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CULTURE,
                        ACLID,
                        DESCRIPTION};
                rowTESFORMRESINFO_RESRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTESFORMRESINFO_RESRow);
                return rowTESFORMRESINFO_RESRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TESFORMRESINFO_RESDataTable cln = ((TESFORMRESINFO_RESDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TESFORMRESINFO_RESDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCULTURE = base.Columns["CULTURE"];
                this.columnACLID = base.Columns["ACLID"];
                this.columnDESCRIPTION = base.Columns["DESCRIPTION"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCULTURE = new global::System.Data.DataColumn("CULTURE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCULTURE);
                this.columnACLID = new global::System.Data.DataColumn("ACLID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnACLID);
                this.columnDESCRIPTION = new global::System.Data.DataColumn("DESCRIPTION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDESCRIPTION);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TESFORMRESINFO_RESRow NewTESFORMRESINFO_RESRow() {
                return ((TESFORMRESINFO_RESRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TESFORMRESINFO_RESRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TESFORMRESINFO_RESRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TESFORMRESINFO_RESRowChanged != null)) {
                    this.TESFORMRESINFO_RESRowChanged(this, new TESFORMRESINFO_RESRowChangeEvent(((TESFORMRESINFO_RESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TESFORMRESINFO_RESRowChanging != null)) {
                    this.TESFORMRESINFO_RESRowChanging(this, new TESFORMRESINFO_RESRowChangeEvent(((TESFORMRESINFO_RESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TESFORMRESINFO_RESRowDeleted != null)) {
                    this.TESFORMRESINFO_RESRowDeleted(this, new TESFORMRESINFO_RESRowChangeEvent(((TESFORMRESINFO_RESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TESFORMRESINFO_RESRowDeleting != null)) {
                    this.TESFORMRESINFO_RESRowDeleting(this, new TESFORMRESINFO_RESRowChangeEvent(((TESFORMRESINFO_RESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTESFORMRESINFO_RESRow(TESFORMRESINFO_RESRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSetEXP3 ds = new DataSetEXP3();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TESFORMRESINFO_RESDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TESBUTTONRESINFO_RESDataTable : global::System.Data.TypedTableBase<TESBUTTONRESINFO_RESRow> {
            
            private global::System.Data.DataColumn columnCULTURE;
            
            private global::System.Data.DataColumn columnACLID;
            
            private global::System.Data.DataColumn columnDESCRIPTION;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TESBUTTONRESINFO_RESDataTable() {
                this.TableName = "TESBUTTONRESINFO_RES";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TESBUTTONRESINFO_RESDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TESBUTTONRESINFO_RESDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CULTUREColumn {
                get {
                    return this.columnCULTURE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ACLIDColumn {
                get {
                    return this.columnACLID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DESCRIPTIONColumn {
                get {
                    return this.columnDESCRIPTION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TESBUTTONRESINFO_RESRow this[int index] {
                get {
                    return ((TESBUTTONRESINFO_RESRow)(this.Rows[index]));
                }
            }
            
            public event TESBUTTONRESINFO_RESRowChangeEventHandler TESBUTTONRESINFO_RESRowChanging;
            
            public event TESBUTTONRESINFO_RESRowChangeEventHandler TESBUTTONRESINFO_RESRowChanged;
            
            public event TESBUTTONRESINFO_RESRowChangeEventHandler TESBUTTONRESINFO_RESRowDeleting;
            
            public event TESBUTTONRESINFO_RESRowChangeEventHandler TESBUTTONRESINFO_RESRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTESBUTTONRESINFO_RESRow(TESBUTTONRESINFO_RESRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TESBUTTONRESINFO_RESRow AddTESBUTTONRESINFO_RESRow(string CULTURE, long ACLID, string DESCRIPTION) {
                TESBUTTONRESINFO_RESRow rowTESBUTTONRESINFO_RESRow = ((TESBUTTONRESINFO_RESRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CULTURE,
                        ACLID,
                        DESCRIPTION};
                rowTESBUTTONRESINFO_RESRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTESBUTTONRESINFO_RESRow);
                return rowTESBUTTONRESINFO_RESRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TESBUTTONRESINFO_RESDataTable cln = ((TESBUTTONRESINFO_RESDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TESBUTTONRESINFO_RESDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCULTURE = base.Columns["CULTURE"];
                this.columnACLID = base.Columns["ACLID"];
                this.columnDESCRIPTION = base.Columns["DESCRIPTION"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCULTURE = new global::System.Data.DataColumn("CULTURE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCULTURE);
                this.columnACLID = new global::System.Data.DataColumn("ACLID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnACLID);
                this.columnDESCRIPTION = new global::System.Data.DataColumn("DESCRIPTION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDESCRIPTION);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TESBUTTONRESINFO_RESRow NewTESBUTTONRESINFO_RESRow() {
                return ((TESBUTTONRESINFO_RESRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TESBUTTONRESINFO_RESRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TESBUTTONRESINFO_RESRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TESBUTTONRESINFO_RESRowChanged != null)) {
                    this.TESBUTTONRESINFO_RESRowChanged(this, new TESBUTTONRESINFO_RESRowChangeEvent(((TESBUTTONRESINFO_RESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TESBUTTONRESINFO_RESRowChanging != null)) {
                    this.TESBUTTONRESINFO_RESRowChanging(this, new TESBUTTONRESINFO_RESRowChangeEvent(((TESBUTTONRESINFO_RESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TESBUTTONRESINFO_RESRowDeleted != null)) {
                    this.TESBUTTONRESINFO_RESRowDeleted(this, new TESBUTTONRESINFO_RESRowChangeEvent(((TESBUTTONRESINFO_RESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TESBUTTONRESINFO_RESRowDeleting != null)) {
                    this.TESBUTTONRESINFO_RESRowDeleting(this, new TESBUTTONRESINFO_RESRowChangeEvent(((TESBUTTONRESINFO_RESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTESBUTTONRESINFO_RESRow(TESBUTTONRESINFO_RESRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSetEXP3 ds = new DataSetEXP3();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TESBUTTONRESINFO_RESDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TESOTHERRESINFO_RESDataTable : global::System.Data.TypedTableBase<TESOTHERRESINFO_RESRow> {
            
            private global::System.Data.DataColumn columnCULTURE;
            
            private global::System.Data.DataColumn columnACLID;
            
            private global::System.Data.DataColumn columnDESCRIPTION;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TESOTHERRESINFO_RESDataTable() {
                this.TableName = "TESOTHERRESINFO_RES";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TESOTHERRESINFO_RESDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TESOTHERRESINFO_RESDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CULTUREColumn {
                get {
                    return this.columnCULTURE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ACLIDColumn {
                get {
                    return this.columnACLID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DESCRIPTIONColumn {
                get {
                    return this.columnDESCRIPTION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TESOTHERRESINFO_RESRow this[int index] {
                get {
                    return ((TESOTHERRESINFO_RESRow)(this.Rows[index]));
                }
            }
            
            public event TESOTHERRESINFO_RESRowChangeEventHandler TESOTHERRESINFO_RESRowChanging;
            
            public event TESOTHERRESINFO_RESRowChangeEventHandler TESOTHERRESINFO_RESRowChanged;
            
            public event TESOTHERRESINFO_RESRowChangeEventHandler TESOTHERRESINFO_RESRowDeleting;
            
            public event TESOTHERRESINFO_RESRowChangeEventHandler TESOTHERRESINFO_RESRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTESOTHERRESINFO_RESRow(TESOTHERRESINFO_RESRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TESOTHERRESINFO_RESRow AddTESOTHERRESINFO_RESRow(string CULTURE, long ACLID, string DESCRIPTION) {
                TESOTHERRESINFO_RESRow rowTESOTHERRESINFO_RESRow = ((TESOTHERRESINFO_RESRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CULTURE,
                        ACLID,
                        DESCRIPTION};
                rowTESOTHERRESINFO_RESRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTESOTHERRESINFO_RESRow);
                return rowTESOTHERRESINFO_RESRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TESOTHERRESINFO_RESDataTable cln = ((TESOTHERRESINFO_RESDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TESOTHERRESINFO_RESDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCULTURE = base.Columns["CULTURE"];
                this.columnACLID = base.Columns["ACLID"];
                this.columnDESCRIPTION = base.Columns["DESCRIPTION"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCULTURE = new global::System.Data.DataColumn("CULTURE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCULTURE);
                this.columnACLID = new global::System.Data.DataColumn("ACLID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnACLID);
                this.columnDESCRIPTION = new global::System.Data.DataColumn("DESCRIPTION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDESCRIPTION);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TESOTHERRESINFO_RESRow NewTESOTHERRESINFO_RESRow() {
                return ((TESOTHERRESINFO_RESRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TESOTHERRESINFO_RESRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TESOTHERRESINFO_RESRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TESOTHERRESINFO_RESRowChanged != null)) {
                    this.TESOTHERRESINFO_RESRowChanged(this, new TESOTHERRESINFO_RESRowChangeEvent(((TESOTHERRESINFO_RESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TESOTHERRESINFO_RESRowChanging != null)) {
                    this.TESOTHERRESINFO_RESRowChanging(this, new TESOTHERRESINFO_RESRowChangeEvent(((TESOTHERRESINFO_RESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TESOTHERRESINFO_RESRowDeleted != null)) {
                    this.TESOTHERRESINFO_RESRowDeleted(this, new TESOTHERRESINFO_RESRowChangeEvent(((TESOTHERRESINFO_RESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TESOTHERRESINFO_RESRowDeleting != null)) {
                    this.TESOTHERRESINFO_RESRowDeleting(this, new TESOTHERRESINFO_RESRowChangeEvent(((TESOTHERRESINFO_RESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTESOTHERRESINFO_RESRow(TESOTHERRESINFO_RESRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSetEXP3 ds = new DataSetEXP3();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TESOTHERRESINFO_RESDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class TESTREEINFO_RESDataTable : global::System.Data.TypedTableBase<TESTREEINFO_RESRow> {
            
            private global::System.Data.DataColumn columnCULTURE;
            
            private global::System.Data.DataColumn columnACLID;
            
            private global::System.Data.DataColumn columnDESCRIPTION;
            
            private global::System.Data.DataColumn columnNAME;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TESTREEINFO_RESDataTable() {
                this.TableName = "TESTREEINFO_RES";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TESTREEINFO_RESDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected TESTREEINFO_RESDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CULTUREColumn {
                get {
                    return this.columnCULTURE;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ACLIDColumn {
                get {
                    return this.columnACLID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DESCRIPTIONColumn {
                get {
                    return this.columnDESCRIPTION;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NAMEColumn {
                get {
                    return this.columnNAME;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TESTREEINFO_RESRow this[int index] {
                get {
                    return ((TESTREEINFO_RESRow)(this.Rows[index]));
                }
            }
            
            public event TESTREEINFO_RESRowChangeEventHandler TESTREEINFO_RESRowChanging;
            
            public event TESTREEINFO_RESRowChangeEventHandler TESTREEINFO_RESRowChanged;
            
            public event TESTREEINFO_RESRowChangeEventHandler TESTREEINFO_RESRowDeleting;
            
            public event TESTREEINFO_RESRowChangeEventHandler TESTREEINFO_RESRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddTESTREEINFO_RESRow(TESTREEINFO_RESRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TESTREEINFO_RESRow AddTESTREEINFO_RESRow(string CULTURE, long ACLID, string DESCRIPTION, string NAME) {
                TESTREEINFO_RESRow rowTESTREEINFO_RESRow = ((TESTREEINFO_RESRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        CULTURE,
                        ACLID,
                        DESCRIPTION,
                        NAME};
                rowTESTREEINFO_RESRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowTESTREEINFO_RESRow);
                return rowTESTREEINFO_RESRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                TESTREEINFO_RESDataTable cln = ((TESTREEINFO_RESDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new TESTREEINFO_RESDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCULTURE = base.Columns["CULTURE"];
                this.columnACLID = base.Columns["ACLID"];
                this.columnDESCRIPTION = base.Columns["DESCRIPTION"];
                this.columnNAME = base.Columns["NAME"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCULTURE = new global::System.Data.DataColumn("CULTURE", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCULTURE);
                this.columnACLID = new global::System.Data.DataColumn("ACLID", typeof(long), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnACLID);
                this.columnDESCRIPTION = new global::System.Data.DataColumn("DESCRIPTION", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDESCRIPTION);
                this.columnNAME = new global::System.Data.DataColumn("NAME", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNAME);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TESTREEINFO_RESRow NewTESTREEINFO_RESRow() {
                return ((TESTREEINFO_RESRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new TESTREEINFO_RESRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(TESTREEINFO_RESRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.TESTREEINFO_RESRowChanged != null)) {
                    this.TESTREEINFO_RESRowChanged(this, new TESTREEINFO_RESRowChangeEvent(((TESTREEINFO_RESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.TESTREEINFO_RESRowChanging != null)) {
                    this.TESTREEINFO_RESRowChanging(this, new TESTREEINFO_RESRowChangeEvent(((TESTREEINFO_RESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.TESTREEINFO_RESRowDeleted != null)) {
                    this.TESTREEINFO_RESRowDeleted(this, new TESTREEINFO_RESRowChangeEvent(((TESTREEINFO_RESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.TESTREEINFO_RESRowDeleting != null)) {
                    this.TESTREEINFO_RESRowDeleting(this, new TESTREEINFO_RESRowChangeEvent(((TESTREEINFO_RESRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveTESTREEINFO_RESRow(TESTREEINFO_RESRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DataSetEXP3 ds = new DataSetEXP3();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "TESTREEINFO_RESDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TESFORMRESINFORow : global::System.Data.DataRow {
            
            private TESFORMRESINFODataTable tableTESFORMRESINFO;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TESFORMRESINFORow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTESFORMRESINFO = ((TESFORMRESINFODataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME {
                get {
                    try {
                        return ((string)(this[this.tableTESFORMRESINFO.NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“TESFORMRESINFO”中列“NAME”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTESFORMRESINFO.NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DESCRIPTION {
                get {
                    try {
                        return ((string)(this[this.tableTESFORMRESINFO.DESCRIPTIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“TESFORMRESINFO”中列“DESCRIPTION”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTESFORMRESINFO.DESCRIPTIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DLLNAME {
                get {
                    try {
                        return ((string)(this[this.tableTESFORMRESINFO.DLLNAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“TESFORMRESINFO”中列“DLLNAME”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTESFORMRESINFO.DLLNAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long ACLID {
                get {
                    try {
                        return ((long)(this[this.tableTESFORMRESINFO.ACLIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“TESFORMRESINFO”中列“ACLID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTESFORMRESINFO.ACLIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ABBREV {
                get {
                    try {
                        return ((string)(this[this.tableTESFORMRESINFO.ABBREVColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“TESFORMRESINFO”中列“ABBREV”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTESFORMRESINFO.ABBREVColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short ICONNUM {
                get {
                    try {
                        return ((short)(this[this.tableTESFORMRESINFO.ICONNUMColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“TESFORMRESINFO”中列“ICONNUM”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTESFORMRESINFO.ICONNUMColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FORM_CALL_MODE {
                get {
                    try {
                        return ((string)(this[this.tableTESFORMRESINFO.FORM_CALL_MODEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“TESFORMRESINFO”中列“FORM_CALL_MODE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTESFORMRESINFO.FORM_CALL_MODEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string APPNAME {
                get {
                    try {
                        return ((string)(this[this.tableTESFORMRESINFO.APPNAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“TESFORMRESINFO”中列“APPNAME”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTESFORMRESINFO.APPNAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DLLPATH {
                get {
                    try {
                        return ((string)(this[this.tableTESFORMRESINFO.DLLPATHColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“TESFORMRESINFO”中列“DLLPATH”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTESFORMRESINFO.DLLPATHColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ADMIN1 {
                get {
                    try {
                        return ((string)(this[this.tableTESFORMRESINFO.ADMIN1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“TESFORMRESINFO”中列“ADMIN1”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTESFORMRESINFO.ADMIN1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ADMIN2 {
                get {
                    try {
                        return ((string)(this[this.tableTESFORMRESINFO.ADMIN2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“TESFORMRESINFO”中列“ADMIN2”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTESFORMRESINFO.ADMIN2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNAMENull() {
                return this.IsNull(this.tableTESFORMRESINFO.NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNAMENull() {
                this[this.tableTESFORMRESINFO.NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDESCRIPTIONNull() {
                return this.IsNull(this.tableTESFORMRESINFO.DESCRIPTIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDESCRIPTIONNull() {
                this[this.tableTESFORMRESINFO.DESCRIPTIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDLLNAMENull() {
                return this.IsNull(this.tableTESFORMRESINFO.DLLNAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDLLNAMENull() {
                this[this.tableTESFORMRESINFO.DLLNAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsACLIDNull() {
                return this.IsNull(this.tableTESFORMRESINFO.ACLIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetACLIDNull() {
                this[this.tableTESFORMRESINFO.ACLIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsABBREVNull() {
                return this.IsNull(this.tableTESFORMRESINFO.ABBREVColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetABBREVNull() {
                this[this.tableTESFORMRESINFO.ABBREVColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsICONNUMNull() {
                return this.IsNull(this.tableTESFORMRESINFO.ICONNUMColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetICONNUMNull() {
                this[this.tableTESFORMRESINFO.ICONNUMColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFORM_CALL_MODENull() {
                return this.IsNull(this.tableTESFORMRESINFO.FORM_CALL_MODEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFORM_CALL_MODENull() {
                this[this.tableTESFORMRESINFO.FORM_CALL_MODEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAPPNAMENull() {
                return this.IsNull(this.tableTESFORMRESINFO.APPNAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAPPNAMENull() {
                this[this.tableTESFORMRESINFO.APPNAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDLLPATHNull() {
                return this.IsNull(this.tableTESFORMRESINFO.DLLPATHColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDLLPATHNull() {
                this[this.tableTESFORMRESINFO.DLLPATHColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsADMIN1Null() {
                return this.IsNull(this.tableTESFORMRESINFO.ADMIN1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetADMIN1Null() {
                this[this.tableTESFORMRESINFO.ADMIN1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsADMIN2Null() {
                return this.IsNull(this.tableTESFORMRESINFO.ADMIN2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetADMIN2Null() {
                this[this.tableTESFORMRESINFO.ADMIN2Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TESBUTTONRESINFORow : global::System.Data.DataRow {
            
            private TESBUTTONRESINFODataTable tableTESBUTTONRESINFO;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TESBUTTONRESINFORow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTESBUTTONRESINFO = ((TESBUTTONRESINFODataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME {
                get {
                    try {
                        return ((string)(this[this.tableTESBUTTONRESINFO.NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“TESBUTTONRESINFO”中列“NAME”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTESBUTTONRESINFO.NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FNAME {
                get {
                    try {
                        return ((string)(this[this.tableTESBUTTONRESINFO.FNAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“TESBUTTONRESINFO”中列“FNAME”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTESBUTTONRESINFO.FNAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long ACLID {
                get {
                    try {
                        return ((long)(this[this.tableTESBUTTONRESINFO.ACLIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“TESBUTTONRESINFO”中列“ACLID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTESBUTTONRESINFO.ACLIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DESCRIPTION {
                get {
                    try {
                        return ((string)(this[this.tableTESBUTTONRESINFO.DESCRIPTIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“TESBUTTONRESINFO”中列“DESCRIPTION”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTESBUTTONRESINFO.DESCRIPTIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OPTYPE {
                get {
                    try {
                        return ((string)(this[this.tableTESBUTTONRESINFO.OPTYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“TESBUTTONRESINFO”中列“OPTYPE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTESBUTTONRESINFO.OPTYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string APPNAME {
                get {
                    try {
                        return ((string)(this[this.tableTESBUTTONRESINFO.APPNAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“TESBUTTONRESINFO”中列“APPNAME”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTESBUTTONRESINFO.APPNAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ADMIN1 {
                get {
                    try {
                        return ((string)(this[this.tableTESBUTTONRESINFO.ADMIN1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“TESBUTTONRESINFO”中列“ADMIN1”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTESBUTTONRESINFO.ADMIN1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ADMIN2 {
                get {
                    try {
                        return ((string)(this[this.tableTESBUTTONRESINFO.ADMIN2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“TESBUTTONRESINFO”中列“ADMIN2”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTESBUTTONRESINFO.ADMIN2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNAMENull() {
                return this.IsNull(this.tableTESBUTTONRESINFO.NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNAMENull() {
                this[this.tableTESBUTTONRESINFO.NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFNAMENull() {
                return this.IsNull(this.tableTESBUTTONRESINFO.FNAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFNAMENull() {
                this[this.tableTESBUTTONRESINFO.FNAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsACLIDNull() {
                return this.IsNull(this.tableTESBUTTONRESINFO.ACLIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetACLIDNull() {
                this[this.tableTESBUTTONRESINFO.ACLIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDESCRIPTIONNull() {
                return this.IsNull(this.tableTESBUTTONRESINFO.DESCRIPTIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDESCRIPTIONNull() {
                this[this.tableTESBUTTONRESINFO.DESCRIPTIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOPTYPENull() {
                return this.IsNull(this.tableTESBUTTONRESINFO.OPTYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOPTYPENull() {
                this[this.tableTESBUTTONRESINFO.OPTYPEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAPPNAMENull() {
                return this.IsNull(this.tableTESBUTTONRESINFO.APPNAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAPPNAMENull() {
                this[this.tableTESBUTTONRESINFO.APPNAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsADMIN1Null() {
                return this.IsNull(this.tableTESBUTTONRESINFO.ADMIN1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetADMIN1Null() {
                this[this.tableTESBUTTONRESINFO.ADMIN1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsADMIN2Null() {
                return this.IsNull(this.tableTESBUTTONRESINFO.ADMIN2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetADMIN2Null() {
                this[this.tableTESBUTTONRESINFO.ADMIN2Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TESOTHERRESINFORow : global::System.Data.DataRow {
            
            private TESOTHERRESINFODataTable tableTESOTHERRESINFO;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TESOTHERRESINFORow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTESOTHERRESINFO = ((TESOTHERRESINFODataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME {
                get {
                    try {
                        return ((string)(this[this.tableTESOTHERRESINFO.NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“TESOTHERRESINFO”中列“NAME”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTESOTHERRESINFO.NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DESCRIPTION {
                get {
                    try {
                        return ((string)(this[this.tableTESOTHERRESINFO.DESCRIPTIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“TESOTHERRESINFO”中列“DESCRIPTION”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTESOTHERRESINFO.DESCRIPTIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long ACLID {
                get {
                    try {
                        return ((long)(this[this.tableTESOTHERRESINFO.ACLIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“TESOTHERRESINFO”中列“ACLID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTESOTHERRESINFO.ACLIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short RESOURCETYPE {
                get {
                    try {
                        return ((short)(this[this.tableTESOTHERRESINFO.RESOURCETYPEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“TESOTHERRESINFO”中列“RESOURCETYPE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTESOTHERRESINFO.RESOURCETYPEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ADMIN1 {
                get {
                    try {
                        return ((string)(this[this.tableTESOTHERRESINFO.ADMIN1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“TESOTHERRESINFO”中列“ADMIN1”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTESOTHERRESINFO.ADMIN1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ADMIN2 {
                get {
                    try {
                        return ((string)(this[this.tableTESOTHERRESINFO.ADMIN2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“TESOTHERRESINFO”中列“ADMIN2”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTESOTHERRESINFO.ADMIN2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNAMENull() {
                return this.IsNull(this.tableTESOTHERRESINFO.NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNAMENull() {
                this[this.tableTESOTHERRESINFO.NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDESCRIPTIONNull() {
                return this.IsNull(this.tableTESOTHERRESINFO.DESCRIPTIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDESCRIPTIONNull() {
                this[this.tableTESOTHERRESINFO.DESCRIPTIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsACLIDNull() {
                return this.IsNull(this.tableTESOTHERRESINFO.ACLIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetACLIDNull() {
                this[this.tableTESOTHERRESINFO.ACLIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRESOURCETYPENull() {
                return this.IsNull(this.tableTESOTHERRESINFO.RESOURCETYPEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRESOURCETYPENull() {
                this[this.tableTESOTHERRESINFO.RESOURCETYPEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsADMIN1Null() {
                return this.IsNull(this.tableTESOTHERRESINFO.ADMIN1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetADMIN1Null() {
                this[this.tableTESOTHERRESINFO.ADMIN1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsADMIN2Null() {
                return this.IsNull(this.tableTESOTHERRESINFO.ADMIN2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetADMIN2Null() {
                this[this.tableTESOTHERRESINFO.ADMIN2Column] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TESTREEINFORow : global::System.Data.DataRow {
            
            private TESTREEINFODataTable tableTESTREEINFO;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TESTREEINFORow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTESTREEINFO = ((TESTREEINFODataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME {
                get {
                    try {
                        return ((string)(this[this.tableTESTREEINFO.NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“TESTREEINFO”中列“NAME”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTESTREEINFO.NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FNAME {
                get {
                    try {
                        return ((string)(this[this.tableTESTREEINFO.FNAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“TESTREEINFO”中列“FNAME”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTESTREEINFO.FNAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DESCRIPTION {
                get {
                    try {
                        return ((string)(this[this.tableTESTREEINFO.DESCRIPTIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“TESTREEINFO”中列“DESCRIPTION”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTESTREEINFO.DESCRIPTIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SHORTCUT {
                get {
                    try {
                        return ((string)(this[this.tableTESTREEINFO.SHORTCUTColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“TESTREEINFO”中列“SHORTCUT”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTESTREEINFO.SHORTCUTColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long ACLID {
                get {
                    try {
                        return ((long)(this[this.tableTESTREEINFO.ACLIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“TESTREEINFO”中列“ACLID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTESTREEINFO.ACLIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RESNAME {
                get {
                    try {
                        return ((string)(this[this.tableTESTREEINFO.RESNAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“TESTREEINFO”中列“RESNAME”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTESTREEINFO.RESNAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long TREENO {
                get {
                    try {
                        return ((long)(this[this.tableTESTREEINFO.TREENOColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“TESTREEINFO”中列“TREENO”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTESTREEINFO.TREENOColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TREESEQ {
                get {
                    try {
                        return ((string)(this[this.tableTESTREEINFO.TREESEQColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“TESTREEINFO”中列“TREESEQ”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTESTREEINFO.TREESEQColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string APPNAME {
                get {
                    try {
                        return ((string)(this[this.tableTESTREEINFO.APPNAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“TESTREEINFO”中列“APPNAME”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTESTREEINFO.APPNAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNAMENull() {
                return this.IsNull(this.tableTESTREEINFO.NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNAMENull() {
                this[this.tableTESTREEINFO.NAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFNAMENull() {
                return this.IsNull(this.tableTESTREEINFO.FNAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFNAMENull() {
                this[this.tableTESTREEINFO.FNAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDESCRIPTIONNull() {
                return this.IsNull(this.tableTESTREEINFO.DESCRIPTIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDESCRIPTIONNull() {
                this[this.tableTESTREEINFO.DESCRIPTIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSHORTCUTNull() {
                return this.IsNull(this.tableTESTREEINFO.SHORTCUTColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSHORTCUTNull() {
                this[this.tableTESTREEINFO.SHORTCUTColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsACLIDNull() {
                return this.IsNull(this.tableTESTREEINFO.ACLIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetACLIDNull() {
                this[this.tableTESTREEINFO.ACLIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRESNAMENull() {
                return this.IsNull(this.tableTESTREEINFO.RESNAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRESNAMENull() {
                this[this.tableTESTREEINFO.RESNAMEColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTREENONull() {
                return this.IsNull(this.tableTESTREEINFO.TREENOColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTREENONull() {
                this[this.tableTESTREEINFO.TREENOColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTREESEQNull() {
                return this.IsNull(this.tableTESTREEINFO.TREESEQColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTREESEQNull() {
                this[this.tableTESTREEINFO.TREESEQColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAPPNAMENull() {
                return this.IsNull(this.tableTESTREEINFO.APPNAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAPPNAMENull() {
                this[this.tableTESTREEINFO.APPNAMEColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TESFORMRESINFO_RESRow : global::System.Data.DataRow {
            
            private TESFORMRESINFO_RESDataTable tableTESFORMRESINFO_RES;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TESFORMRESINFO_RESRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTESFORMRESINFO_RES = ((TESFORMRESINFO_RESDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CULTURE {
                get {
                    try {
                        return ((string)(this[this.tableTESFORMRESINFO_RES.CULTUREColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“TESFORMRESINFO_RES”中列“CULTURE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTESFORMRESINFO_RES.CULTUREColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long ACLID {
                get {
                    try {
                        return ((long)(this[this.tableTESFORMRESINFO_RES.ACLIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“TESFORMRESINFO_RES”中列“ACLID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTESFORMRESINFO_RES.ACLIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DESCRIPTION {
                get {
                    try {
                        return ((string)(this[this.tableTESFORMRESINFO_RES.DESCRIPTIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“TESFORMRESINFO_RES”中列“DESCRIPTION”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTESFORMRESINFO_RES.DESCRIPTIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCULTURENull() {
                return this.IsNull(this.tableTESFORMRESINFO_RES.CULTUREColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCULTURENull() {
                this[this.tableTESFORMRESINFO_RES.CULTUREColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsACLIDNull() {
                return this.IsNull(this.tableTESFORMRESINFO_RES.ACLIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetACLIDNull() {
                this[this.tableTESFORMRESINFO_RES.ACLIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDESCRIPTIONNull() {
                return this.IsNull(this.tableTESFORMRESINFO_RES.DESCRIPTIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDESCRIPTIONNull() {
                this[this.tableTESFORMRESINFO_RES.DESCRIPTIONColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TESBUTTONRESINFO_RESRow : global::System.Data.DataRow {
            
            private TESBUTTONRESINFO_RESDataTable tableTESBUTTONRESINFO_RES;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TESBUTTONRESINFO_RESRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTESBUTTONRESINFO_RES = ((TESBUTTONRESINFO_RESDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CULTURE {
                get {
                    try {
                        return ((string)(this[this.tableTESBUTTONRESINFO_RES.CULTUREColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“TESBUTTONRESINFO_RES”中列“CULTURE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTESBUTTONRESINFO_RES.CULTUREColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long ACLID {
                get {
                    try {
                        return ((long)(this[this.tableTESBUTTONRESINFO_RES.ACLIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“TESBUTTONRESINFO_RES”中列“ACLID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTESBUTTONRESINFO_RES.ACLIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DESCRIPTION {
                get {
                    try {
                        return ((string)(this[this.tableTESBUTTONRESINFO_RES.DESCRIPTIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“TESBUTTONRESINFO_RES”中列“DESCRIPTION”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTESBUTTONRESINFO_RES.DESCRIPTIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCULTURENull() {
                return this.IsNull(this.tableTESBUTTONRESINFO_RES.CULTUREColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCULTURENull() {
                this[this.tableTESBUTTONRESINFO_RES.CULTUREColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsACLIDNull() {
                return this.IsNull(this.tableTESBUTTONRESINFO_RES.ACLIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetACLIDNull() {
                this[this.tableTESBUTTONRESINFO_RES.ACLIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDESCRIPTIONNull() {
                return this.IsNull(this.tableTESBUTTONRESINFO_RES.DESCRIPTIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDESCRIPTIONNull() {
                this[this.tableTESBUTTONRESINFO_RES.DESCRIPTIONColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TESOTHERRESINFO_RESRow : global::System.Data.DataRow {
            
            private TESOTHERRESINFO_RESDataTable tableTESOTHERRESINFO_RES;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TESOTHERRESINFO_RESRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTESOTHERRESINFO_RES = ((TESOTHERRESINFO_RESDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CULTURE {
                get {
                    try {
                        return ((string)(this[this.tableTESOTHERRESINFO_RES.CULTUREColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“TESOTHERRESINFO_RES”中列“CULTURE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTESOTHERRESINFO_RES.CULTUREColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long ACLID {
                get {
                    try {
                        return ((long)(this[this.tableTESOTHERRESINFO_RES.ACLIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“TESOTHERRESINFO_RES”中列“ACLID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTESOTHERRESINFO_RES.ACLIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DESCRIPTION {
                get {
                    try {
                        return ((string)(this[this.tableTESOTHERRESINFO_RES.DESCRIPTIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“TESOTHERRESINFO_RES”中列“DESCRIPTION”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTESOTHERRESINFO_RES.DESCRIPTIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCULTURENull() {
                return this.IsNull(this.tableTESOTHERRESINFO_RES.CULTUREColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCULTURENull() {
                this[this.tableTESOTHERRESINFO_RES.CULTUREColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsACLIDNull() {
                return this.IsNull(this.tableTESOTHERRESINFO_RES.ACLIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetACLIDNull() {
                this[this.tableTESOTHERRESINFO_RES.ACLIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDESCRIPTIONNull() {
                return this.IsNull(this.tableTESOTHERRESINFO_RES.DESCRIPTIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDESCRIPTIONNull() {
                this[this.tableTESOTHERRESINFO_RES.DESCRIPTIONColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class TESTREEINFO_RESRow : global::System.Data.DataRow {
            
            private TESTREEINFO_RESDataTable tableTESTREEINFO_RES;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal TESTREEINFO_RESRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableTESTREEINFO_RES = ((TESTREEINFO_RESDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CULTURE {
                get {
                    try {
                        return ((string)(this[this.tableTESTREEINFO_RES.CULTUREColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“TESTREEINFO_RES”中列“CULTURE”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTESTREEINFO_RES.CULTUREColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public long ACLID {
                get {
                    try {
                        return ((long)(this[this.tableTESTREEINFO_RES.ACLIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“TESTREEINFO_RES”中列“ACLID”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTESTREEINFO_RES.ACLIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DESCRIPTION {
                get {
                    try {
                        return ((string)(this[this.tableTESTREEINFO_RES.DESCRIPTIONColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“TESTREEINFO_RES”中列“DESCRIPTION”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTESTREEINFO_RES.DESCRIPTIONColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string NAME {
                get {
                    try {
                        return ((string)(this[this.tableTESTREEINFO_RES.NAMEColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("表“TESTREEINFO_RES”中列“NAME”的值为 DBNull。", e);
                    }
                }
                set {
                    this[this.tableTESTREEINFO_RES.NAMEColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCULTURENull() {
                return this.IsNull(this.tableTESTREEINFO_RES.CULTUREColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCULTURENull() {
                this[this.tableTESTREEINFO_RES.CULTUREColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsACLIDNull() {
                return this.IsNull(this.tableTESTREEINFO_RES.ACLIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetACLIDNull() {
                this[this.tableTESTREEINFO_RES.ACLIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDESCRIPTIONNull() {
                return this.IsNull(this.tableTESTREEINFO_RES.DESCRIPTIONColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDESCRIPTIONNull() {
                this[this.tableTESTREEINFO_RES.DESCRIPTIONColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNAMENull() {
                return this.IsNull(this.tableTESTREEINFO_RES.NAMEColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNAMENull() {
                this[this.tableTESTREEINFO_RES.NAMEColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TESFORMRESINFORowChangeEvent : global::System.EventArgs {
            
            private TESFORMRESINFORow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TESFORMRESINFORowChangeEvent(TESFORMRESINFORow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TESFORMRESINFORow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TESBUTTONRESINFORowChangeEvent : global::System.EventArgs {
            
            private TESBUTTONRESINFORow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TESBUTTONRESINFORowChangeEvent(TESBUTTONRESINFORow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TESBUTTONRESINFORow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TESOTHERRESINFORowChangeEvent : global::System.EventArgs {
            
            private TESOTHERRESINFORow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TESOTHERRESINFORowChangeEvent(TESOTHERRESINFORow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TESOTHERRESINFORow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TESTREEINFORowChangeEvent : global::System.EventArgs {
            
            private TESTREEINFORow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TESTREEINFORowChangeEvent(TESTREEINFORow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TESTREEINFORow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TESFORMRESINFO_RESRowChangeEvent : global::System.EventArgs {
            
            private TESFORMRESINFO_RESRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TESFORMRESINFO_RESRowChangeEvent(TESFORMRESINFO_RESRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TESFORMRESINFO_RESRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TESBUTTONRESINFO_RESRowChangeEvent : global::System.EventArgs {
            
            private TESBUTTONRESINFO_RESRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TESBUTTONRESINFO_RESRowChangeEvent(TESBUTTONRESINFO_RESRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TESBUTTONRESINFO_RESRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TESOTHERRESINFO_RESRowChangeEvent : global::System.EventArgs {
            
            private TESOTHERRESINFO_RESRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TESOTHERRESINFO_RESRowChangeEvent(TESOTHERRESINFO_RESRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TESOTHERRESINFO_RESRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class TESTREEINFO_RESRowChangeEvent : global::System.EventArgs {
            
            private TESTREEINFO_RESRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TESTREEINFO_RESRowChangeEvent(TESTREEINFO_RESRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public TESTREEINFO_RESRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591